// üìç lib/features/home/presentation/tabs/brush_time_page.dart
// (ÌååÏùº Ï†ÑÏ≤¥Î•º Ïù¥ ÏΩîÎìúÎ°ú ÍµêÏ≤¥ÌïòÏÑ∏Ïöî)

import 'package:chicachew/core/progress/daily_brush_provider.dart';
import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';



class BrushTimePage extends ConsumerWidget {
  const BrushTimePage({super.key});

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final theme = Theme.of(context);
    final textTheme = theme.textTheme;
    final colorScheme = theme.colorScheme;

    // ‚úÖ ÏúÑÏóêÏÑú ÏÉùÏÑ±Ìïú providerÎ•º ÏÇ¨Ïö©ÌïòÏó¨ ÏñëÏπò ÌöüÏàò(count)Î•º Í∞ÄÏ†∏ÏòµÎãàÎã§.
    final dailyBrush = ref.watch(dailyBrushProvider);
    final brushCount = dailyBrush.count;

    return Scaffold(
      appBar: AppBar(
        title: const Text('ÏñëÏπò ÏãúÍ∞Ñ'),
        centerTitle: false,
        backgroundColor: colorScheme.surface,
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: [
            // (ÏÉÅÎã® Î∞∞ÎÑà Ïπ¥ÎìúÏôÄ 'Ïã§Ï†Ñ ÏãúÏûë' Î≤ÑÌäºÏùÄ Ïù¥Ï†ÑÍ≥º ÎèôÏùºÌï©ÎãàÎã§)
            Card(
              color: colorScheme.primaryContainer,
              child: Padding(
                padding: const EdgeInsets.all(20.0),
                child: Row(
                  children: [
                    Expanded(
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Text(
                            'Ïò§ÎäòÎèÑ Ï¶êÍ≤ÅÍ≤å',
                            style: textTheme.headlineMedium?.copyWith(
                              color: colorScheme.onPrimaryContainer,
                              fontWeight: FontWeight.bold,
                            ),
                          ),
                          Text(
                            'ÏñëÏπòÌï¥Î≥ºÍπåÏöî? ü¶∑‚ú®',
                            style: textTheme.headlineMedium?.copyWith(
                              color: colorScheme.onPrimaryContainer,
                              fontWeight: FontWeight.bold,
                            ),
                          ),
                        ],
                      ),
                    ),
                    const SizedBox(width: 16),
                    Image.asset(
                      'assets/images/canine.png',
                      width: 80,
                      height: 80,
                    ),
                  ],
                ),
              ),
            ),
            const SizedBox(height: 24),

            FilledButton.icon(
              onPressed: () {
                context.go('/live');
              },
              icon: const Icon(Icons.play_circle_fill, size: 28),
              label: const Text(
                'Ïã§Ï†Ñ ÏãúÏûë',
                style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
              ),
              style: FilledButton.styleFrom(
                padding: const EdgeInsets.symmetric(vertical: 20),
              ),
            ),
            const SizedBox(height: 24),

            // ‚úÖ 'Ïò§ÎäòÏùò ÏñëÏπò Í∏∞Î°ù' Ïπ¥Îìú UI
            Card(
              color: colorScheme.surfaceVariant.withOpacity(0.5),
              child: Padding(
                padding: const EdgeInsets.all(20.0),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      'Ïò§ÎäòÏùò ÏñëÏπò Í∏∞Î°ù (${brushCount} / 3)', // Ïò§Îäò Îã¶ÏùÄ ÌöüÏàò ÌëúÏãú
                      style: textTheme.titleLarge?.copyWith(
                        color: colorScheme.onSurfaceVariant,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                    const SizedBox(height: 16),
                    Row(
                      mainAxisAlignment: MainAxisAlignment.spaceAround,
                      children: [
                        // ‚úÖ count Í∞íÏùÑ Í∏∞Ï§ÄÏúºÎ°ú ÏñëÏπò ÏôÑÎ£å Ïó¨Î∂ÄÎ•º ÌëúÏãúÌïòÎèÑÎ°ù ÏàòÏ†ï
                        _BrushRecordItem(
                          time: 'ÏïÑÏπ®',
                          icon: Icons.light_mode,
                          isDone: brushCount >= 1, // 1Î≤à Ïù¥ÏÉÅ Îã¶ÏïòÏúºÎ©¥ ÏôÑÎ£å
                        ),
                        _BrushRecordItem(
                          time: 'Ï†êÏã¨',
                          icon: Icons.restaurant,
                          isDone: brushCount >= 2, // 2Î≤à Ïù¥ÏÉÅ Îã¶ÏïòÏúºÎ©¥ ÏôÑÎ£å
                        ),
                        _BrushRecordItem(
                          time: 'Ï†ÄÎÖÅ',
                          icon: Icons.dark_mode,
                          isDone: brushCount >= 3, // 3Î≤à Ïù¥ÏÉÅ Îã¶ÏïòÏúºÎ©¥ ÏôÑÎ£å
                        ),
                      ],
                    ),
                  ],
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }
}

class _BrushRecordItem extends StatelessWidget {
  const _BrushRecordItem({
    required this.time,
    required this.icon,
    required this.isDone,
  });

  final String time;
  final IconData icon;
  final bool isDone;

  @override
  Widget build(BuildContext context) {
    final colorScheme = Theme.of(context).colorScheme;
    final color = isDone ? colorScheme.primary : colorScheme.onSurface.withOpacity(0.4);
    final iconData = isDone ? Icons.check_circle : Icons.radio_button_unchecked;

    return Column(
      children: [
        Icon(icon, color: color, size: 32),
        const SizedBox(height: 8),
        Text(time, style: TextStyle(color: color, fontWeight: FontWeight.bold)),
        const SizedBox(height: 4),
        Icon(iconData, color: color, size: 24),
      ],
    );
  }
}